<Application
	x:Class="Krisp.App.KrispApp" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:Controls="clr-namespace:Krisp.UI.Views.Controls" xmlns:wpf="clr-namespace:MaterialDesignThemes.Wpf;assembly=MaterialDesignThemes.Wpf" xmlns:app="clr-namespace:Krisp.App">
	<Application.Resources>
		<ResourceDictionary>
			<ResourceDictionary.MergedDictionaries>
				<ResourceDictionary
					Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Light.xaml" />
				<ResourceDictionary
					Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Defaults.xaml" />
				<ResourceDictionary
					Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Popupbox.xaml" />
			</ResourceDictionary.MergedDictionaries>
			<FontFamily
				x:Key="KrispFont">pack://application:,,,/Krisp;component/Resources/GTWalsheimPro/#GT Walsheim Pro</FontFamily>
			<SolidColorBrush
				x:Key="PrimaryHueLightBrush"
				Color="#FF6371DE" />
			<SolidColorBrush
				x:Key="PrimaryHueLightForegroundBrush"
				Color="#FFFFFF" />
			<SolidColorBrush
				x:Key="PrimaryHueMidBrush"
				Color="#FF6371DE" />
			<SolidColorBrush
				x:Key="PrimaryHueMidForegroundBrush"
				Color="#FFFFFF" />
			<SolidColorBrush
				x:Key="PrimaryHueDarkBrush"
				Color="#FF6371DE" />
			<SolidColorBrush
				x:Key="PrimaryHueDarkForegroundBrush"
				Color="#FFFFFF" />
			<SolidColorBrush
				x:Key="darkBrush"
				Color="#473F56" />
			<SolidColorBrush
				x:Key="KrispLogoColor"
				Color="#212332" />
			<LinearGradientBrush
				x:Key="KrispLogoGradientDown"
				EndPoint="0.5,1"
				StartPoint="0.5,0">
				<GradientStop
					Color="#F2810B"
					Offset="0" />
				<GradientStop
					Color="#E93314"
					Offset="1" />
			</LinearGradientBrush>
			<LinearGradientBrush
				x:Key="KrispLogoGradientUp"
				EndPoint="0.5,1"
				StartPoint="0.5,0">
				<GradientStop
					Color="#409BFF"
					Offset="0" />
				<GradientStop
					Color="#E548FF"
					Offset="1" />
			</LinearGradientBrush>
			<ControlTemplate
				x:Key="PageTemplateWithKrispLogo"
				TargetType="{x:Type Page}">
				<Grid
					Width="309"
					Height="355"
					Background="#FFFFFFFF">
					<Controls:KrispLogo
						Height="50"
						Width="50"
						VerticalAlignment="Top"
						HorizontalAlignment="Center"
						Margin="0,87,0,0" />
					<ContentControl
						Content="{TemplateBinding Content}"
						Margin="0,158,0,0"
						Focusable="False"
						HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
						VerticalAlignment="{TemplateBinding VerticalAlignment}"
						SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
				</Grid>
			</ControlTemplate>
			<Style
				x:Key="FocusVisual">
				<Setter
					Property="Control.Template">
					<Setter.Value>
						<ControlTemplate>
							<Rectangle
								Margin="2"
								SnapsToDevicePixels="True"
								Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
								StrokeThickness="1"
								StrokeDashArray="1 2" />
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
			<Style
				x:Key="OptionMarkFocusVisual">
				<Setter
					Property="Control.Template">
					<Setter.Value>
						<ControlTemplate>
							<Rectangle
								Margin="14,0,0,0"
								SnapsToDevicePixels="True"
								Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
								StrokeThickness="1"
								StrokeDashArray="1 2" />
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
			<Style
				x:Key="MDToolTipModified"
				TargetType="{x:Type ToolTip}">
				<Setter
					Property="Control.Padding"
					Value="8" />
				<Setter
					Property="ToolTip.Placement"
					Value="Custom" />
				<Setter
					Property="Control.FontFamily"
					Value="{StaticResource KrispFont}" />
				<Setter
					Property="ToolTip.CustomPopupPlacementCallback"
					Value="{x:Static wpf:ToolTipAssist.CustomPopupPlacementCallback}" />
				<Setter
					Property="Control.Template">
					<Setter.Value>
						<ControlTemplate
							TargetType="{x:Type ToolTip}">
							<Border
								Background="{TemplateBinding Background}"
								CornerRadius="3"
								Margin="{TemplateBinding Margin}"
								BorderBrush="#83848D"
								BorderThickness="1">
								<ContentPresenter
									Name="ContentPresenter"
									Margin="{TemplateBinding Padding}"
									Content="{TemplateBinding Content}"
									ContentTemplate="{TemplateBinding ContentTemplate}"
									ContentStringFormat="{TemplateBinding ContentStringFormat}" />
							</Border>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
			<Style
				x:Key="KrispToolTip"
				TargetType="{x:Type ToolTip}">
				<Setter
					Property="Control.Foreground"
					Value="#FFFFFF" />
				<Setter
					Property="Control.Background"
					Value="#5E5F6D" />
				<Setter
					Property="Control.Padding"
					Value="8" />
				<Setter
					Property="Control.FontFamily"
					Value="{StaticResource KrispFont}" />
				<Setter
					Property="ToolTip.Placement"
					Value="Custom" />
				<Setter
					Property="ToolTip.CustomPopupPlacementCallback"
					Value="{x:Static wpf:ToolTipAssist.CustomPopupPlacementCallback}" />
				<Setter
					Property="Control.Template">
					<Setter.Value>
						<ControlTemplate
							TargetType="{x:Type ToolTip}">
							<StackPanel>
								<Grid
									Width="13"
									Height="7"
									HorizontalAlignment="Center">
									<Path
										Data="M4.17166,1.86565 C5.37223,0.388021 7.62777,0.388023 8.82834,1.86565 L13,7 L0,7 L4.17166,1.86565"
										Fill="#5E5F6D" />
								</Grid>
								<Border
									Background="{TemplateBinding Background}"
									CornerRadius="3"
									Margin="{TemplateBinding Margin}">
									<ContentPresenter
										Name="ContentPresenter"
										Margin="{TemplateBinding Padding}"
										Content="{TemplateBinding Content}"
										ContentTemplate="{TemplateBinding ContentTemplate}"
										ContentStringFormat="{TemplateBinding ContentStringFormat}" />
								</Border>
							</StackPanel>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
			<Style
				x:Key="ButtonStyle"
				TargetType="{x:Type Button}">
				<Setter
					Property="Control.Background"
					Value="#6371DE" />
				<Setter
					Property="Control.Foreground"
					Value="#FFFFFFFF" />
				<Setter
					Property="Control.BorderBrush"
					Value="#00FFFFFF" />
				<Setter
					Property="Control.BorderThickness"
					Value="0" />
				<Setter
					Property="TextBlock.FontWeight"
					Value="SemiBold" />
				<Setter
					Property="Control.HorizontalContentAlignment"
					Value="Center" />
				<Setter
					Property="Control.VerticalContentAlignment"
					Value="Center" />
				<Setter
					Property="Control.Padding"
					Value="16 4" />
				<Setter
					Property="FrameworkElement.FocusVisualStyle"
					Value="{x:Null}" />
				<Setter
					Property="UIElement.Focusable"
					Value="False" />
				<Setter
					Property="Control.Template">
					<Setter.Value>
						<ControlTemplate
							TargetType="{x:Type ButtonBase}">
							<Border
								Name="border"
								Background="{TemplateBinding Background}"
								CornerRadius="5"
								BorderThickness="{TemplateBinding BorderThickness}"
								BorderBrush="{TemplateBinding BorderBrush}">
								<ContentControl
									Content="{TemplateBinding Content}"
									ContentTemplate="{TemplateBinding ContentTemplate}"
									Focusable="False"
									HorizontalAlignment="Center"
									VerticalAlignment="Center"
									ContentStringFormat="{TemplateBinding ContentStringFormat}"
									HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
									VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
									Padding="{TemplateBinding Padding}"
									SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
							</Border>
							<ControlTemplate.Triggers>
								<Trigger
									Property="UIElement.IsMouseOver"
									Value="True">
									<Setter
										TargetName="border"
										Property="Border.Background"
										Value="#4959DB" />
								</Trigger>
								<Trigger
									Property="UIElement.IsKeyboardFocused"
									Value="True">
									<Setter
										TargetName="border"
										Property="Border.Background"
										Value="#4959DB" />
								</Trigger>
								<Trigger
									Property="UIElement.IsEnabled"
									Value="False">
									<Setter
										Property="UIElement.Opacity"
										Value="0.23" />
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
			<Style
				x:Key="NegativeButtonStyle"
				TargetType="{x:Type Button}">
				<Setter
					Property="Control.Background"
					Value="#00FFFFFF" />
				<Setter
					Property="Control.Foreground"
					Value="#00FFFFFF" />
				<Setter
					Property="Control.BorderBrush"
					Value="#6371DE" />
				<Setter
					Property="Control.BorderThickness"
					Value="1" />
				<Setter
					Property="TextBlock.FontWeight"
					Value="SemiBold" />
				<Setter
					Property="TextBlock.Foreground"
					Value="#6371DE" />
				<Setter
					Property="Control.HorizontalContentAlignment"
					Value="Center" />
				<Setter
					Property="Control.VerticalContentAlignment"
					Value="Center" />
				<Setter
					Property="Control.Padding"
					Value="16 4" />
				<Setter
					Property="FrameworkElement.FocusVisualStyle"
					Value="{x:Null}" />
				<Setter
					Property="UIElement.Focusable"
					Value="False" />
				<Setter
					Property="Control.Template">
					<Setter.Value>
						<ControlTemplate
							TargetType="{x:Type ButtonBase}">
							<Border
								Name="border"
								Background="{TemplateBinding Background}"
								CornerRadius="5"
								BorderThickness="{TemplateBinding BorderThickness}"
								BorderBrush="{TemplateBinding BorderBrush}">
								<ContentControl
									Content="{TemplateBinding Content}"
									ContentTemplate="{TemplateBinding ContentTemplate}"
									Focusable="False"
									HorizontalAlignment="Center"
									VerticalAlignment="Center"
									ContentStringFormat="{TemplateBinding ContentStringFormat}"
									HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
									VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
									Padding="{TemplateBinding Padding}"
									SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
							</Border>
							<ControlTemplate.Triggers>
								<Trigger
									Property="UIElement.IsMouseOver"
									Value="True">
									<Setter
										TargetName="border"
										Property="Border.Background"
										Value="#48DADDEC" />
								</Trigger>
								<Trigger
									Property="UIElement.IsKeyboardFocused"
									Value="True">
									<Setter
										TargetName="border"
										Property="Border.Background"
										Value="#48DADDEC" />
								</Trigger>
								<Trigger
									Property="UIElement.IsEnabled"
									Value="False">
									<Setter
										Property="UIElement.Opacity"
										Value="0.23" />
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
			<Style
				x:Key="TransparentButtonStyle"
				TargetType="{x:Type Button}">
				<Setter
					Property="Control.Background"
					Value="#00FFFFFF" />
				<Setter
					Property="Control.Foreground"
					Value="#6371DE" />
				<Setter
					Property="Control.BorderBrush"
					Value="#00FFFFFF" />
				<Setter
					Property="Control.BorderThickness"
					Value="0" />
				<Setter
					Property="TextBlock.FontWeight"
					Value="Bold" />
				<Setter
					Property="Control.HorizontalContentAlignment"
					Value="Center" />
				<Setter
					Property="Control.VerticalContentAlignment"
					Value="Center" />
				<Setter
					Property="FrameworkElement.FocusVisualStyle"
					Value="{x:Null}" />
				<Setter
					Property="UIElement.Focusable"
					Value="False" />
				<Setter
					Property="Control.Template">
					<Setter.Value>
						<ControlTemplate
							TargetType="{x:Type ButtonBase}">
							<Border
								Name="border"
								Background="{TemplateBinding Background}"
								CornerRadius="3"
								BorderThickness="{TemplateBinding BorderThickness}"
								BorderBrush="{TemplateBinding BorderBrush}">
								<ContentControl
									Content="{TemplateBinding Content}"
									ContentTemplate="{TemplateBinding ContentTemplate}"
									Focusable="False"
									HorizontalAlignment="Center"
									VerticalAlignment="Center"
									ContentStringFormat="{TemplateBinding ContentStringFormat}"
									HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
									VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
									Padding="{TemplateBinding Padding}"
									SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
							</Border>
							<ControlTemplate.Triggers>
								<Trigger
									Property="UIElement.IsMouseOver"
									Value="True">
									<Setter
										Property="Control.Background"
										Value="#E6E7F4" />
									<Setter
										Property="FrameworkElement.Cursor"
										Value="Hand" />
								</Trigger>
								<Trigger
									Property="UIElement.IsKeyboardFocused"
									Value="True">
									<Setter
										Property="Control.Foreground"
										Value="#E6E7F4" />
								</Trigger>
								<Trigger
									Property="UIElement.IsEnabled"
									Value="False">
									<Setter
										Property="UIElement.Opacity"
										Value="0.23" />
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
			<Style
				x:Key="HeaderButtonStyle"
				TargetType="{x:Type Button}">
				<Style.Resources>
					<ResourceDictionary>
						<Style
							x:Key="{x:Type ToolTip}"
							TargetType="{x:Type ToolTip}"
							BasedOn="{StaticResource MDToolTipModified}" />
					</ResourceDictionary>
				</Style.Resources>
				<Setter
					Property="Control.Background"
					Value="#00FFFFFF" />
				<Setter
					Property="Control.Foreground"
					Value="#FFFFFFFF" />
				<Setter
					Property="Control.BorderBrush"
					Value="#00FFFFFF" />
				<Setter
					Property="Control.BorderThickness"
					Value="0" />
				<Setter
					Property="Control.HorizontalContentAlignment"
					Value="Center" />
				<Setter
					Property="Control.VerticalContentAlignment"
					Value="Center" />
				<Setter
					Property="FrameworkElement.FocusVisualStyle"
					Value="{x:Null}" />
				<Setter
					Property="UIElement.Focusable"
					Value="False" />
				<Setter
					Property="Control.Template">
					<Setter.Value>
						<ControlTemplate
							TargetType="{x:Type ButtonBase}">
							<Border
								Name="border"
								Background="{TemplateBinding Background}"
								CornerRadius="3"
								BorderThickness="{TemplateBinding BorderThickness}"
								BorderBrush="{TemplateBinding BorderBrush}">
								<ContentControl
									Content="{TemplateBinding Content}"
									ContentTemplate="{TemplateBinding ContentTemplate}"
									Focusable="False"
									HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
									VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
									ContentStringFormat="{TemplateBinding ContentStringFormat}"
									HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
									VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
									Padding="{TemplateBinding Padding}"
									SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
							</Border>
							<ControlTemplate.Triggers>
								<Trigger
									Property="UIElement.IsMouseOver"
									Value="True">
									<Setter
										TargetName="border"
										Property="Border.Background"
										Value="#C4C9EE" />
								</Trigger>
								<Trigger
									Property="UIElement.IsKeyboardFocused"
									Value="True">
									<Setter
										TargetName="border"
										Property="Border.Background"
										Value="#C4C9EE" />
								</Trigger>
								<Trigger
									Property="UIElement.IsEnabled"
									Value="False">
									<Setter
										Property="UIElement.Opacity"
										Value="0.23" />
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
			<Style
				x:Key="KrispCheckBox"
				TargetType="{x:Type CheckBox}">
				<Setter
					Property="FrameworkElement.FocusVisualStyle"
					Value="{StaticResource FocusVisual}" />
				<Setter
					Property="Control.BorderThickness"
					Value="1" />
				<Setter
					Property="Control.VerticalContentAlignment"
					Value="Center" />
				<Setter
					Property="Control.Background"
					Value="{DynamicResource PrimaryHueMidBrush}" />
				<Setter
					Property="Control.BorderBrush"
					Value="{DynamicResource PrimaryHueMidBrush}" />
				<Setter
					Property="Control.Foreground"
					Value="{Binding Path=(TextElement.Foreground), RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}}" />
				<Setter
					Property="Control.Template">
					<Setter.Value>
						<ControlTemplate
							TargetType="{x:Type CheckBox}">
							<FrameworkTemplate.Resources>
								<ResourceDictionary>
									<Storyboard
										x:Key="Click">
										<DoubleAnimationUsingKeyFrames
											Storyboard.TargetProperty="(FrameworkElement.Width)"
											Storyboard.TargetName="InteractionEllipse">
											<EasingDoubleKeyFrame
												KeyTime="0"
												Value="0" />
											<EasingDoubleKeyFrame
												KeyTime="0:0:0.3"
												Value="48" />
										</DoubleAnimationUsingKeyFrames>
										<DoubleAnimationUsingKeyFrames
											Storyboard.TargetProperty="(FrameworkElement.Height)"
											Storyboard.TargetName="InteractionEllipse">
											<EasingDoubleKeyFrame
												KeyTime="0"
												Value="0" />
											<EasingDoubleKeyFrame
												KeyTime="0:0:0.3"
												Value="48" />
										</DoubleAnimationUsingKeyFrames>
										<DoubleAnimationUsingKeyFrames
											Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)"
											Storyboard.TargetName="InteractionEllipse">
											<EasingDoubleKeyFrame
												KeyTime="0"
												Value="0" />
											<EasingDoubleKeyFrame
												KeyTime="0:0:0.3"
												Value="-24" />
										</DoubleAnimationUsingKeyFrames>
										<DoubleAnimationUsingKeyFrames
											Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.Y)"
											Storyboard.TargetName="InteractionEllipse">
											<EasingDoubleKeyFrame
												KeyTime="0"
												Value="0" />
											<EasingDoubleKeyFrame
												KeyTime="0:0:0.3"
												Value="-24" />
										</DoubleAnimationUsingKeyFrames>
										<DoubleAnimationUsingKeyFrames
											Storyboard.TargetProperty="(UIElement.Opacity)"
											Storyboard.TargetName="InteractionEllipse">
											<EasingDoubleKeyFrame
												KeyTime="0"
												Value="0.3" />
											<EasingDoubleKeyFrame
												KeyTime="0:0:0.3"
												Value="0" />
										</DoubleAnimationUsingKeyFrames>
									</Storyboard>
								</ResourceDictionary>
							</FrameworkTemplate.Resources>
							<Grid
								Name="templateRoot"
								Background="#00FFFFFF"
								SnapsToDevicePixels="True">
								<Grid.ColumnDefinitions>
									<ColumnDefinition
										Width="Auto" />
									<ColumnDefinition
										Width="*" />
								</Grid.ColumnDefinitions>
								<Viewbox
									Width="18"
									Height="18"
									VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
									FlowDirection="LeftToRight">
									<Canvas
										Width="24"
										Height="24">
										<Path
											Name="Graphic"
											Data="M19,3 L5,3 C3.89,3 3,3.89 3,5 L3,19 A2,2 0 0 0 5,21L19,21 A2,2 0 0 0 21,19L21,5 C21,3.89 20.1,3 19,3 M19,5 L19,19 L5,19 L5,5 L19,5"
											Fill="#89000000" />
										<Ellipse
											Name="InteractionEllipse"
											Fill="{TemplateBinding Foreground}"
											Width="0"
											Height="0"
											Canvas.Top="12"
											Canvas.Left="12"
											Opacity="0"
											RenderTransformOrigin="0.5,0.5"
											IsHitTestVisible="False">
											<UIElement.RenderTransform>
												<TransformGroup>
													<ScaleTransform />
													<SkewTransform />
													<RotateTransform />
													<TranslateTransform />
												</TransformGroup>
											</UIElement.RenderTransform>
										</Ellipse>
									</Canvas>
								</Viewbox>
								<ContentPresenter
									Name="contentPresenter"
									Grid.Column="1"
									Focusable="False"
									HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
									Margin="{TemplateBinding Padding}"
									RecognizesAccessKey="True"
									SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
									VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
							</Grid>
							<ControlTemplate.Triggers>
								<EventTrigger
									RoutedEvent="ButtonBase.Click">
									<BeginStoryboard
										Storyboard="{StaticResource Click}" />
								</EventTrigger>
								<Trigger
									Property="ContentControl.HasContent"
									Value="True">
									<Setter
										Property="FrameworkElement.FocusVisualStyle"
										Value="{StaticResource OptionMarkFocusVisual}" />
									<Setter
										Property="Control.Padding"
										Value="4,2,0,0" />
								</Trigger>
								<Trigger
									Property="ButtonBase.IsPressed"
									Value="True" />
								<Trigger
									Property="ToggleButton.IsChecked"
									Value="true">
									<Setter
										TargetName="Graphic"
										Property="Path.Data"
										Value="M10,17 L5,12 L6.41,10.58 L10,14.17 L17.59,6.58 L19,8 M19,3 L5,3 C3.89,3 3,3.89 3,5 L3,19 A2,2 0 0 0 5,21L19,21 A2,2 0 0 0 21,19L21,5 C21,3.89 20.1,3 19,3" />
									<Setter
										TargetName="Graphic"
										Property="Shape.Fill"
										Value="{Binding Path=Background, RelativeSource={RelativeSource TemplatedParent}}" />
								</Trigger>
								<Trigger
									Property="UIElement.IsEnabled"
									Value="False">
									<Setter
										TargetName="Graphic"
										Property="Shape.Fill"
										Value="#FFBDBDBD" />
									<Setter
										Property="UIElement.Opacity"
										Value="0.56" />
								</Trigger>
								<Trigger
									Property="ToggleButton.IsChecked"
									Value="{x:Null}">
									<Setter
										TargetName="Graphic"
										Property="Path.Data"
										Value="M6,13 L6,11 L18,11 L18,13 M19,3 L5,3 C3.89,3 3,3.89 3,5 L3,19 A2,2 0 0 0 5,21L19,21 A2,2 0 0 0 21,19L21,5 C21,3.89 20.1,3 19,3" />
									<Setter
										TargetName="Graphic"
										Property="Shape.Fill"
										Value="{Binding Path=Background, RelativeSource={RelativeSource TemplatedParent}}" />
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
		</ResourceDictionary>
	</Application.Resources>
</Application>
